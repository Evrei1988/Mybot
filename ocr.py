import cv2
import pytesseract
import re

# üîπ –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ Tesseract (–µ—Å–ª–∏ Windows, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø—É—Ç—å)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def extract_text_from_image(image_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)"""
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # –ì—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
    blurred = cv2.GaussianBlur(gray, (5,5), 0)  # –†–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–æ–≤
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY, 11, 2)  # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    
    text = pytesseract.image_to_string(thresh)
    return text

def extract_data(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û, WO-–Ω–æ–º–µ—Ä, SA-–Ω–æ–º–µ—Ä –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
    name = re.search(r"TECHNICIAN\s*-\s*([\w\s]+)", text, re.IGNORECASE)
    wo_number = re.search(r"WO-?(\d+)", text, re.IGNORECASE)
    sa_number = re.search(r"SA-?(\d+)", text, re.IGNORECASE)
    time_job = re.search(r"TIME ON JOB\s*-\s*(\d{1,2}:\d{2}\s*(AM|PM)?)-(\d{1,2}:\d{2}\s*(AM|PM)?)", text, re.IGNORECASE)

    return {
        "name": name.group(1) if name else "Unknown",
        "wo_number": wo_number.group(1) if wo_number else "Unknown",
        "sa_number": sa_number.group(1) if sa_number else "Unknown",
        "time_start": time_job.group(1) if time_job else "Unknown",
        "time_end": time_job.group(3) if time_job else "Unknown"
    }

# üîπ –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
text_1 = extract_text_from_image("photo_1.jpg")
text_2 = extract_text_from_image("photo_2.jpg")

print("\nüìú –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ:\n", text_1)
print("\nüìú –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ:\n", text_2)

# üîπ –ó–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data_1 = extract_data(text_1)
data_2 = extract_data(text_2)

print("\n‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ:")
print(data_1)

print("\n‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ:")
print(data_2)

import re

def clean_text(text):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    return text.strip().replace("\n", " ") if text else "Unknown"

def clean_name(name):
    """–£–¥–∞–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –∏–º–µ–Ω–∏"""
    name = re.sub(r"\s*\d+$", "", name)  # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ
    return name.strip()

def extract_data(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û, WO-–Ω–æ–º–µ—Ä, SA-–Ω–æ–º–µ—Ä –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)"""
    
    name = re.search(r"TECHNICIAN\s*[-:]\s*([\w\s]+)", text, re.IGNORECASE)
    wo_number = re.search(r"WO\s*[-: ]?\s*(\d+)", text, re.IGNORECASE)
    sa_number = re.search(r"SA\s*[-: ]?\s*(\d+)", text, re.IGNORECASE)
    time_job = re.search(r"TIME ON JOB\s*[-:]?\s*(\d{1,2}:\d{2}\s*(AM|PM)?)\s*[-‚Äì]+\s*(\d{1,2}:\d{2}\s*(AM|PM)?)", text, re.IGNORECASE)

    return {
        "name": clean_name(clean_text(name.group(1))) if name else "Unknown",  # ‚úÖ –£–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É "2" –≤ –∫–æ–Ω—Ü–µ
        "wo_number": clean_text(wo_number.group(1)) if wo_number else "Unknown",
        "sa_number": clean_text(sa_number.group(1)) if sa_number else "Unknown",
        "time_start": clean_text(time_job.group(1)) if time_job else "Unknown",
        "time_end": clean_text(time_job.group(3)) if time_job else "Unknown"
    }

# üîπ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –¥–∞–Ω–Ω—ã–µ
data_1 = extract_data(text_1)
data_2 = extract_data(text_2)

# üî• –¢–µ–ø–µ—Ä—å WO –∏ SA –±–µ—Ä—É—Ç—Å—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –∏—Ö –Ω–µ—Ç
final_data = {
    "name": data_1["name"] if data_1["name"] != "Unknown" else data_2["name"],
    "wo_number": data_1["wo_number"] if data_1["wo_number"] != "Unknown" else data_2["wo_number"],
    "sa_number": data_1["sa_number"] if data_1["sa_number"] != "Unknown" else data_2["sa_number"],
    "time_start": data_1["time_start"] if data_1["time_start"] != "Unknown" else data_2["time_start"],
    "time_end": data_1["time_end"] if data_1["time_end"] != "Unknown" else data_2["time_end"]
}

print("\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(final_data)

import requests
from datetime import datetime

# –¢–≤–æ–π URL —Ñ–æ—Ä–º—ã (–±–µ–∑ "/viewform")
GOOGLE_FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLSeOdz1y3pu8WJ9WdXkPoHlDcjRWeyQdSWvmhwoqsKoUFvGSjw/viewform?usp=dialog"

# URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
FORM_RESPONSE_URL = GOOGLE_FORM_URL + "/formResponse"

# –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ OCR
data = {
    "name": "Sergei Posysoev",  # –ò–º—è (–±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≥–∞–ª–æ—á–∫–∞)
    "wo_number": "1794125",     # WO-–Ω–æ–º–µ—Ä
    "sa_number": "2023550",     # SA-–Ω–æ–º–µ—Ä
    "time_start": "14:57",      # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    "time_end": "16:07"         # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
}

# –î–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é)
current_date = datetime.today()
day = current_date.day
month = current_date.strftime("%B")  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (Google Forms –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

# –ü–æ–ª—è —Ñ–æ—Ä–º—ã
form_data = {
    "entry.1179944082": "true",        # –ì–∞–ª–æ—á–∫–∞
    "entry.1663783792_day": day,       # –î–µ–Ω—å
    "entry.1663783792_month": month,   # –ú–µ—Å—è—Ü
    "entry.1507949236": data["sa_number"],  # SA-–Ω–æ–º–µ—Ä
    "entry.1601721281": data["wo_number"],  # WO-–Ω–æ–º–µ—Ä
    "entry.834778282_minute": data["time_end"].split(":")[1],  # –ú–∏–Ω—É—Ç—ã (–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    "entry.834778282_hour": data["time_end"].split(":")[0],    # –ß–∞—Å—ã (–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    "entry.145104768_minute": data["time_start"].split(":")[1],  # –ú–∏–Ω—É—Ç—ã (–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)
    "entry.145104768_hour": data["time_start"].split(":")[0]     # –ß–∞—Å—ã (–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã Google –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å)
headers = {
    "Referer": GOOGLE_FORM_URL + "/viewform",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
}

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
response = requests.post(FORM_RESPONSE_URL, data=form_data, headers=headers)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
if response.status_code == 200:
    print("‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
else:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.status_code}")

